
var request = require('superagent');
var Containers = require('../../container');
var Resource = require('../../resource');

function <%= _.classify(resource.name) %>() {
  if(!(this instanceof <%= _.classify(resource.name) %>)) {
    return new (<%= _.classify(resource.name) %>.bind.apply(<%= _.classify(resource.name) %>, arguments));
  }
  Resource.apply(this, arguments);
}

<% resource.singleRelations.forEach(function(relation) { %>
<%= _.classify(resource.name) %>.prototype.<%= relation.name %> = function <%= relation.name %>(<%= resource.name %>Id, options, callback) {
  var response = this.api.send(request
    .get('/<%= _.pluralize(resource.name) %>/'+<%= resource.name %>Id+'/<%= relation.resource.name %>')
    .query(options));
  var container = Containers.Default;
  response = response.then(container.bind(this.api));
  if(callback) Promise.asCallback(callback);
  return response;
}
<% }); %>

<% resource.multipleRelations.forEach(function(relation) { %>
<%= _.classify(resource.name) %>.prototype.<%= _.pluralize(relation.resource.name) %> = function <%= _.pluralize(relation.resource.name) %>(<%= resource.name %>Id, options, callback) {
  var response = this.api.send(request
    .get('/<%= _.pluralize(resource.name) %>/'+<%= resource.name %>Id+'/<%= _.pluralize(relation.resource.name) %>')
    .query(options));
  var container = Containers.Cursor;
  response = response.then(container.bind(api));
  if(callback) Promise.asCallback(callback);
  return response;
}
<% }); %>

<% resource.statics.forEach(function(actor) { var action = actor.action; %>
<%= _.classify(resource.name) %>.prototype.<%= actor.name %> = function <%= actor.name %>(options, callback) {
  var req = request
    .<%= action.method %>('/<%= _.pluralize(resource.name) + (action.verb ? '/'+action.verb : '') %>')
    .<%= action.method === 'get' ? 'query' : 'send' %>(options);  
  var response = this.api.send(req);
  var container = Containers.<%= _.classify(action.options.container || 'default') %>;
  response = response.then(container.bind(this.api));
  if(callback) Promise.asCallback(callback);
  return response;
}
<% }); %>

<% resource.methods.forEach(function(actor) { var action = actor.action; %>
<%= _.classify(resource.name) %>.prototype.<%= actor.name %> = function <%= actor.name %>(<%= resource.name %>Id, options, callback) {
  var req = request
    .<%= action.method %>('/<%- _.pluralize(resource.name)+"/'+"+resource.name+"Id"+(action.verb ? "+'/"+action.verb+"'" : "") %>)
    .<%= action.method === 'get' ? 'query' : 'send' %>(options);
  var response = this.api.send(req);
  var container = Containers.<%= _.classify(action.options.container || 'default') %>;
  response = response.then(container.bind(this.api));
  if(callback) Promise.asCallback(callback);
  return response;
}
<% }); %>


